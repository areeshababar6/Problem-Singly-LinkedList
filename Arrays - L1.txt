						Arrays (Row Major & Column Major)
-----------------------------------------------------------------------------------------------------------------------------------

Task 1:

#include<iostream>

using namespace std;
void main()
{
	int arr2d[3][4];
	int arr1d[12];
	int offset;

	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			cin >> arr2d[i][j];
		}
	}
	cout << "\n\n Displaying 2D array: " <<endl;
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			cout << arr2d[i][j] << " ";
		}
		cout << endl;
	}
	for (int i = 0; i < 3; i++)
	{
		for (int j = 0; j < 4; j++)
		{
			//offset = j * 3 + i;  //cm
			offset = i * 4 + j;  //rm
			arr1d[offset] = arr2d[i][j];
		}
	}

	cout << "\n\n Displaying 1D array: ";

	for (int i = 0; i < 12; i++)
	{
		cout << arr1d[i] << " ";
	}
	cout << endl;
}

--------------------------------------------------------------------------
Task 2:

#include<iostream>
using namespace std;
class matrix
{
	int** p;
	int r;
	int c;
	int* rowmajor;
	int* multiply1D;

public:
	matrix(int row, int col);
	void disp2D();
	void dispRowMajor();
	void Multiply_rowMajor(matrix& x);
	void rowMajor_2D();
	~matrix();
};

int main()
{
	matrix a(4, 3);
	matrix b(3, 4);

	a.disp2D();
	a.dispRowMajor();

	b.disp2D();
	b.dispRowMajor();

	a.Multiply_rowMajor(b);
	a.rowMajor_2D();

	return 0;
}
matrix::matrix(int row, int col)
{
	r = row;
	c = col;
	p = new int* [r];

	for (int i = 0; i < r; i++)
	{
		p[i] = new int[c];
		for (int j = 0; j < c; j++)
			p[i][j] = (i + j);
	}
	
	rowmajor = new int[r * c];
	multiply1D = new int[r * c];

	int offset;

	for (int i = 0; i < r; i++)
	{
		for (int j = 0; j < c; j++)
		{
			offset = i * c + j;
			rowmajor[offset]=p[i][j];
		}
	}
}
void matrix::disp2D()
{
	cout << "\n\n Displaying 2D array...\n";

	for (int i = 0; i < r; i++)
	{
		for(int j = 0; j < c; j++)
		{
			cout << " " << p[i][j];
		}
		cout << endl;
	}
}
void matrix::dispRowMajor()
{
	cout << "\n\n Displaying 1D array...\n";

	for (int i = 0; i < (r*c); i++)
	{
		cout << " " << rowmajor[i];
	}
	cout << endl;
}
void matrix::Multiply_rowMajor(matrix& x)
{
	for (int i = 0; i < (r * c); i++)
		multiply1D[i] = rowmajor[i] * x.rowmajor[i];

	cout << "\n\n Displaying 1D array: " << endl;
	for (int i = 0; i < (r * c); i++)
		cout << " " << multiply1D[i];
	cout << endl;
}
matrix::~matrix()
{
	for (int i = 0; i < r; i++)
		delete[] p[i];

	delete[] p;
	delete[] rowmajor;
	delete[] multiply1D;
}
void matrix::rowMajor_2D()
{
	int arr[4][3];
	int k = 0;

	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 3; j++, k++)
		{
			arr[i][j] = multiply1D[k];
		}
	}

	cout << "\n\n Displaying 2D array: \n";
	for (int i = 0; i < 4; i++)
	{
		for (int j = 0; j < 3; j++)
		{
			cout << " " << arr[i][j];
		}
		cout << endl;
	}
}